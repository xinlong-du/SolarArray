# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(100.0, 100.0), 
    point2=(133.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(133.0, 100.0), 
    point2=(133.0, 101.42))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(133.0, 101.42), 
    point2=(115.14, 101.42))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(115.14, 101.42), 
    point2=(115.14, 125.03))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(115.14, 125.03), 
    point2=(101.36, 125.03))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(101.36, 125.03), 
    point2=(101.36, 129.99))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(101.36, 129.99), 
    point2=(111.96, 129.99))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(111.96, 129.99), 
    point2=(111.96, 132.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(111.96, 132.0), 
    point2=(100.0, 132.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(100.0, 132.0), 
    point2=(100.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(101.37, 101.42), 
    point2=(113.47, 101.42))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(113.47, 101.42), 
    point2=(113.47, 123.36))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(113.47, 123.36), 
    point2=(101.37, 123.36))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(101.37, 123.36), 
    point2=(101.37, 101.42))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='moduleFrame', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['moduleFrame'].BaseSolidExtrude(depth=533.4, 
    sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
# Save by xinlo on 2023_07_08-00.29.15; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='moduleFrame-1', 
    part=mdb.models['Model-1'].parts['moduleFrame'])
# Save by xinlo on 2023_07_08-00.40.04; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['moduleFrame'].DatumPlaneByOffset(flip=SIDE1, 
    offset=12.7, plane=mdb.models['Model-1'].parts['moduleFrame'].faces[9])
mdb.models['Model-1'].parts['moduleFrame'].Mirror(keepOriginal=ON, mirrorPlane=
    mdb.models['Model-1'].parts['moduleFrame'].datums[2])
# Save by xinlo on 2023_07_08-00.45.42; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by xinlo on 2023_07_08-00.49.15; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=400.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(111.0, 132.0), 
    point2=(111.0, 134.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(111.0, 134.0), 
    point2=(107.0, 136.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(107.0, 136.0), 
    point2=(96.5, 136.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(96.5, 136.0), 
    point2=(96.5, 121.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(96.5, 121.0), 
    point2=(78.1, 121.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(78.1, 121.0), 
    point2=(78.1, 136.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(78.1, 136.0), 
    point2=(67.6, 136.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(67.6, 136.0), 
    point2=(63.6, 134.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(63.6, 134.0), 
    point2=(63.6, 132.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(63.6, 132.0), 
    point2=(74.6, 132.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(74.6, 132.0), 
    point2=(74.6, 117.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(74.6, 117.0), 
    point2=(100.0, 117.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(100.0, 117.0), 
    point2=(100.0, 132.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(100.0, 132.0), 
    point2=(111.0, 132.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[14], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[15])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='clamp', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['clamp'].BaseSolidExtrude(depth=60.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='clamp-1', part=
    mdb.models['Model-1'].parts['clamp'])
# Save by xinlo on 2023_07_08-15.40.49; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['moduleFrame'].features['Solid extrude-1'].setValues(
    depth=60.0)
mdb.models['Model-1'].parts['moduleFrame'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by xinlo on 2023_07_08-15.55.53; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=500.0)
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(216.5, 80.4), 
    point2=(216.5, 100.0))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[2])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(216.5, 100.0), 
    point2=(153.0, 100.0))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(153.0, 100.0), 
    point2=(153.0, -103.2))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(153.0, -103.2), 
    point2=(216.5, -103.2))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[4], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(216.5, -103.2), 
    point2=(216.5, -83.6))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(216.5, -83.6), 
    point2=(215.0, -83.6))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(215.0, -83.6), 
    point2=(215.0, -101.7))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[7], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(215.0, -101.7), 
    point2=(154.5, -101.7))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(154.5, -101.7), 
    point2=(154.5, 98.5))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[9], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(154.5, 98.5), 
    point2=(215.0, 98.5))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(215.0, 98.5), 
    point2=(215.0, 80.4))
mdb.models['Model-1'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[11], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12])
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(215.0, 80.4), 
    point2=(216.5, 80.4))
mdb.models['Model-1'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Model-1'].sketches['__profile__'].geometry[12], entity2=
    mdb.models['Model-1'].sketches['__profile__'].geometry[13])
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='purlin', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['purlin'].BaseSolidExtrude(depth=120.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
# Save by xinlo on 2023_07_08-16.58.26; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='purlin-1', 
    part=mdb.models['Model-1'].parts['purlin'])
mdb.models['Model-1'].rootAssembly.rotate(angle=-90.0, axisDirection=(0.0, 
    203.2, 0.0), axisPoint=(153.0, -103.2, 120.0), instanceList=('purlin-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('purlin-1', ), 
    vector=(-140.0, 0.0, -121.75))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('purlin-1', ), 
    vector=(14.3, 0.0, 0.0))
# Save by xinlo on 2023_07_08-17.10.35; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['moduleFrame'].features['Solid extrude-1'].setValues(
    depth=80.0)
mdb.models['Model-1'].parts['moduleFrame'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.translate(instanceList=('moduleFrame-1', ), 
    vector=(0.0, 0.0, -10.0))
# Save by xinlo on 2023_07_08-17.29.09; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['clamp'].HoleThruAllFromEdges(diameter=6.35, 
    distance1=30.0, distance2=9.2, edge1=
    mdb.models['Model-1'].parts['clamp'].edges[25], edge2=
    mdb.models['Model-1'].parts['clamp'].edges[23], plane=
    mdb.models['Model-1'].parts['clamp'].faces[8], planeSide=SIDE1)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['purlin'].HoleThruAllFromEdges(diameter=6.35, 
    distance1=60.0, distance2=31.75, edge1=
    mdb.models['Model-1'].parts['purlin'].edges[28], edge2=
    mdb.models['Model-1'].parts['purlin'].edges[26], plane=
    mdb.models['Model-1'].parts['purlin'].faces[9], planeSide=SIDE1)
del mdb.models['Model-1'].parts['purlin'].features['Cut circular hole-1']
mdb.models['Model-1'].parts['purlin'].HoleBlindFromEdges(depth=1.5, diameter=
    6.35, distance1=60.0, distance2=31.75, edge1=
    mdb.models['Model-1'].parts['purlin'].edges[28], edge2=
    mdb.models['Model-1'].parts['purlin'].edges[26], plane=
    mdb.models['Model-1'].parts['purlin'].faces[9], planeSide=SIDE1)
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by xinlo on 2023_07_08-18.11.38; build 2017 2016_09_27-14.54.59 126836
# Save by xinlo on 2023_07_08-18.12.40; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['clamp'].features['Cut circular hole-1'].setValues(
    diameter=6.0)
mdb.models['Model-1'].parts['clamp'].regenerate()
mdb.models['Model-1'].parts['purlin'].features['Cut circular hole-1'].setValues(
    diameter=6.0)
mdb.models['Model-1'].parts['purlin'].regenerate()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=30.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(11.5, 0.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='bolt', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['bolt'].BaseSolidExtrude(depth=4.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.63, name='__profile__', 
    sheetSize=65.36, transform=
    mdb.models['Model-1'].parts['bolt'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 4.0)))
mdb.models['Model-1'].parts['bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(3.0, 0.0))
mdb.models['Model-1'].parts['bolt'].SolidExtrude(depth=22.5, 
    flipExtrudeDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], sketchPlaneSide=
    SIDE1, sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.97, name='__profile__', 
    sheetSize=78.95, transform=
    mdb.models['Model-1'].parts['bolt'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 26.5)))
mdb.models['Model-1'].parts['bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(11.5, 0.0))
mdb.models['Model-1'].parts['bolt'].SolidExtrude(depth=4.0, 
    flipExtrudeDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], sketchPlaneSide=
    SIDE1, sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['bolt'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['bolt'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].HorizontalDimension(textPoint=(
    6.67731094360352, -2.13617324829102), value=5.75, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].parts['bolt'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['bolt'].regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-1'].parts['bolt'].features['Solid extrude-1'].sketch)
mdb.models['Model-1'].parts['bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-1'].parts['bolt'].features['Solid extrude-1'])
mdb.models['Model-1'].sketches['__edit__'].ObliqueDimension(textPoint=(
    18.3492851257324, 4.53985261917114), value=11.5, vertex1=
    mdb.models['Model-1'].sketches['__edit__'].vertices[0], vertex2=
    mdb.models['Model-1'].sketches['__edit__'].vertices[1])
mdb.models['Model-1'].sketches['__edit__'].dimensions[1].setValues(value=5.75)
mdb.models['Model-1'].parts['bolt'].features['Solid extrude-1'].setValues(
    sketch=mdb.models['Model-1'].sketches['__edit__'])
del mdb.models['Model-1'].sketches['__edit__']
mdb.models['Model-1'].parts['bolt'].regenerate()
del mdb.models['Model-1'].parts['bolt']
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=30.0)
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(5.75, 0.0))
mdb.models['Model-1'].Part(dimensionality=THREE_D, name='bolt', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['bolt'].BaseSolidExtrude(depth=4.0, sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.83, name='__profile__', 
    sheetSize=33.4, transform=
    mdb.models['Model-1'].parts['bolt'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 4.0)))
mdb.models['Model-1'].parts['bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(3.0, 0.0))
mdb.models['Model-1'].parts['bolt'].SolidExtrude(depth=22.5, 
    flipExtrudeDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], sketchPlaneSide=
    SIDE1, sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=1.38, name='__profile__', 
    sheetSize=55.47, transform=
    mdb.models['Model-1'].parts['bolt'].MakeSketchTransform(
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], 
    sketchPlaneSide=SIDE1, 
    sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0], 
    sketchOrientation=RIGHT, origin=(0.0, 0.0, 26.5)))
mdb.models['Model-1'].parts['bolt'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
mdb.models['Model-1'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(5.75, 0.0))
mdb.models['Model-1'].parts['bolt'].SolidExtrude(depth=4.0, 
    flipExtrudeDirection=OFF, sketch=
    mdb.models['Model-1'].sketches['__profile__'], sketchOrientation=RIGHT, 
    sketchPlane=mdb.models['Model-1'].parts['bolt'].faces[1], sketchPlaneSide=
    SIDE1, sketchUpEdge=mdb.models['Model-1'].parts['bolt'].edges[0])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='bolt-1', part=
    mdb.models['Model-1'].parts['bolt'])
mdb.models['Model-1'].rootAssembly.rotate(angle=90.0, axisDirection=(1.0, 0.0, 
    0.0), axisPoint=(0.0, 0.0, 0.0), instanceList=('bolt-1', ))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('bolt-1', ), vector=
    (0.0, 0.0, 10.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('bolt-1', ), vector=
    (87.3, 121.0, 20.0))
mdb.models['Model-1'].rootAssembly.translate(instanceList=('bolt-1', ), vector=
    (0.0, 4.0, 0.0))
# Save by xinlo on 2023_07_08-22.46.43; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='steel')
mdb.models['Model-1'].materials['steel'].Elastic(table=((200000.0, 0.3), ))
mdb.models['Model-1'].Material(name='aluminum')
mdb.models['Model-1'].materials['aluminum'].Elastic(table=((68300.0, 0.33), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='steel', name='steel', 
    thickness=None)
mdb.models['Model-1'].HomogeneousSolidSection(material='aluminum', name=
    'aluminum', thickness=None)
mdb.models['Model-1'].parts['bolt'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['bolt'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='aluminum', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['clamp'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['clamp'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='aluminum', thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['moduleFrame'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['moduleFrame'].cells.getSequenceFromMask(
    mask=('[#3 ]', ), )), sectionName='aluminum', thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['purlin'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['Model-1'].parts['purlin'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='steel', thicknessAssignment=
    FROM_SECTION)
# Save by xinlo on 2023_07_08-23.05.52; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
# Save by xinlo on 2023_07_08-23.12.55; build 2017 2016_09_27-14.54.59 126836
# Save by xinlo on 2023_07_08-23.12.58; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].StaticStep(name='pretension', nlgeom=ON, previous=
    'Initial')
mdb.models['Model-1'].StaticStep(name='cyclicLoading', previous='pretension')
mdb.models['Model-1'].ContactProperty('bolt2clampProp')
mdb.models['Model-1'].interactionProperties['bolt2clampProp'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].rootAssembly.Surface(name='bolt', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['bolt-1'].faces.getSequenceFromMask(
    ('[#7f ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='clamp', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['clamp-1'].faces.getSequenceFromMask(
    ('[#1ffff ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='bolt2clampProp', master=
    mdb.models['Model-1'].rootAssembly.surfaces['bolt'], name='bolt2clamp', 
    slave=mdb.models['Model-1'].rootAssembly.surfaces['clamp'], sliding=FINITE, 
    thickness=ON)
# Save by xinlo on 2023_07_09-17.58.01; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].parts['bolt'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['bolt'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['bolt'].faces[0])
mdb.models['Model-1'].parts['bolt'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['bolt'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['bolt'].faces[6])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['clamp'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['clamp'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['clamp'].faces[9])
del mdb.models['Model-1'].parts['clamp'].features['Partition cell-1']
mdb.models['Model-1'].parts['clamp'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['clamp'].cells.getSequenceFromMask(('[#1 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['clamp'].faces[14])
mdb.models['Model-1'].parts['clamp'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['clamp'].cells.getSequenceFromMask(('[#2 ]', ), 
    ), extendFace=mdb.models['Model-1'].parts['clamp'].faces[17])
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].parts['clamp'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['clamp'].cells.getSequenceFromMask(('[#10 ]', 
    ), ), normal=mdb.models['Model-1'].parts['clamp'].edges[31], point=
    mdb.models['Model-1'].parts['clamp'].vertices[21])
mdb.models['Model-1'].parts['clamp'].PartitionCellByPlanePointNormal(cells=
    mdb.models['Model-1'].parts['clamp'].cells.getSequenceFromMask(('[#8 ]', ), 
    ), normal=mdb.models['Model-1'].parts['clamp'].edges[62], point=
    mdb.models['Model-1'].parts['clamp'].vertices[37])
mdb.models['Model-1'].parts['moduleFrame'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['moduleFrame'].cells.getSequenceFromMask((
    '[#1 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['moduleFrame'].faces[2])
del mdb.models['Model-1'].parts['moduleFrame'].features['Partition cell-1']
mdb.models['Model-1'].parts['moduleFrame'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['moduleFrame'].cells.getSequenceFromMask((
    '[#3 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['moduleFrame'].faces[2])
mdb.models['Model-1'].parts['moduleFrame'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['moduleFrame'].cells.getSequenceFromMask((
    '[#9 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['moduleFrame'].faces[8])
mdb.models['Model-1'].parts['moduleFrame'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['moduleFrame'].cells.getSequenceFromMask((
    '[#22 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['moduleFrame'].faces[20])
mdb.models['Model-1'].parts['moduleFrame'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['moduleFrame'].cells.getSequenceFromMask((
    '[#84 ]', ), ), extendFace=
    mdb.models['Model-1'].parts['moduleFrame'].faces[20])
mdb.models['Model-1'].parts['purlin'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['purlin'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), extendFace=mdb.models['Model-1'].parts['purlin'].faces[3])
del mdb.models['Model-1'].parts['purlin'].features['Partition cell-1']
mdb.models['Model-1'].parts['purlin'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['purlin'].cells.getSequenceFromMask(('[#1 ]', 
    ), ), extendFace=mdb.models['Model-1'].parts['purlin'].faces[1])
mdb.models['Model-1'].parts['purlin'].PartitionCellByExtendFace(cells=
    mdb.models['Model-1'].parts['purlin'].cells.getSequenceFromMask(('[#4 ]', 
    ), ), extendFace=mdb.models['Model-1'].parts['purlin'].faces[11])
# Save by xinlo on 2023_07_09-18.28.25; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].interactions['bolt2clamp'].setValues(adjustMethod=NONE, 
    bondingSet=None, contactTracking=TWO_CONFIG, enforcement=SURFACE_TO_SURFACE
    , initialClearance=OMIT, sliding=FINITE, thickness=ON)
mdb.models['Model-1'].interactions['bolt2clamp'].swapSurfaces()
mdb.models['Model-1'].rootAssembly.Surface(name='clamp', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['clamp-1'].faces.getSequenceFromMask(
    ('[#fffcfcee #1ff ]', ), ))
mdb.models['Model-1'].interactionProperties.changeKey(fromName='bolt2clampProp'
    , toName='clamp2boltProp')
mdb.models['Model-1'].ContactProperty('purlin2boltProp')
mdb.models['Model-1'].interactionProperties['purlin2boltProp'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['purlin2boltProp'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].interactionProperties['clamp2boltProp'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['clamp2boltProp'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].ContactProperty('moduleFrame2clampProp')
mdb.models['Model-1'].interactionProperties['moduleFrame2clampProp'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['moduleFrame2clampProp'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['moduleFrame2clampProp'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].ContactProperty('purlin2moduleFrameProp')
mdb.models['Model-1'].interactionProperties['purlin2moduleFrameProp'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['purlin2moduleFrameProp'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.models['Model-1'].rootAssembly.Surface(name='moduleFrame', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['moduleFrame-1'].faces.getSequenceFromMask(
    ('[#fffdde7c #ffbbcf9f #3ff ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='moduleFrame2clampProp', master=
    mdb.models['Model-1'].rootAssembly.surfaces['moduleFrame'], name=
    'moduleFrame2clamp', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['clamp'], sliding=FINITE, 
    thickness=ON)
mdb.models['Model-1'].rootAssembly.Surface(name='purlin', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['purlin-1'].faces.getSequenceFromMask(
    ('[#7ffffcfc ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='purlin2boltProp', master=
    mdb.models['Model-1'].rootAssembly.surfaces['purlin'], name='purlin2bolt', 
    slave=mdb.models['Model-1'].rootAssembly.surfaces['bolt'], sliding=FINITE, 
    thickness=ON)
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    clearanceRegion=None, createStepName='Initial', datumAxis=None, 
    initialClearance=OMIT, interactionProperty='purlin2moduleFrameProp', 
    master=mdb.models['Model-1'].rootAssembly.surfaces['purlin'], name=
    'purlin2moduleFrame', slave=
    mdb.models['Model-1'].rootAssembly.surfaces['moduleFrame'], sliding=FINITE, 
    thickness=ON)
# Save by xinlo on 2023_07_09-18.47.40; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].interactions['bolt2clamp'].setValues(adjustMethod=NONE, 
    bondingSet=None, contactTracking=TWO_CONFIG, enforcement=SURFACE_TO_SURFACE
    , initialClearance=OMIT, interactionProperty='clamp2boltProp', sliding=
    FINITE, thickness=ON)
mdb.models['Model-1'].interactions.changeKey(fromName='bolt2clamp', toName=
    'clamp2bolt')
# Save by xinlo on 2023_07_09-18.51.25; build 2017 2016_09_27-14.54.59 126836
# Save by xinlo on 2023_07_09-18.55.24; build 2017 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.Surface(name='boltCut', side2Faces=
    mdb.models['Model-1'].rootAssembly.instances['bolt-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].BoltLoad(boltMethod=APPLY_FORCE, createStepName=
    'pretension', datumAxis=mdb.models['Model-1'].rootAssembly.datums[1].axis2, 
    magnitude=4448.22, name='pretension', region=
    mdb.models['Model-1'].rootAssembly.surfaces['boltCut'])
# Save by xinlo on 2023_07_09-19.10.23; build 2017 2016_09_27-14.54.59 126836
# Save by xinlo on 2023_07_09-19.12.43; build 2017 2016_09_27-14.54.59 126836
